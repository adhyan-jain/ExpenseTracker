{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adhyan Jain\\\\Desktop\\\\ExpenseTracker\\\\Frontend\\\\src\\\\Components\\\\Transactions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport BarChart from \"./Charts/BarChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Transactions = ({\n  userEmail\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [categories, setCategories] = useState({});\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      try {\n        const response = await fetch(`/api/transactions?email=${userEmail}`);\n        const data = await response.json();\n        setTransactions(data);\n\n        // Calculate category totals for bar chart\n        const categoryTotals = {};\n        data.forEach(transaction => {\n          if (transaction.type === \"expense\") {\n            categoryTotals[transaction.category] = (categoryTotals[transaction.category] || 0) + parseFloat(transaction.amount);\n          }\n        });\n        setCategories(categoryTotals);\n      } catch (error) {\n        console.error(\"Error fetching transactions:\", error);\n      }\n    };\n    fetchTransactions();\n  }, [userEmail]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transactions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Expenses by Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), Object.keys(categories).length > 0 ? /*#__PURE__*/_jsxDEV(BarChart, {\n        data: categories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No expenses to display.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [transaction.category, \": $\", transaction.amount, \" on\", \" \", transaction.date]\n      }, transaction.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Transactions, \"oKxEOjupsOMhyRg/yBxM9nomIXw=\");\n_c = Transactions;\nexport default Transactions;\nvar _c;\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","jsxDEV","_jsxDEV","Transactions","userEmail","_s","transactions","setTransactions","categories","setCategories","fetchTransactions","response","fetch","data","json","categoryTotals","forEach","transaction","type","category","parseFloat","amount","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","map","date","id","_c","$RefreshReg$"],"sources":["C:/Users/Adhyan Jain/Desktop/ExpenseTracker/Frontend/src/Components/Transactions.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport BarChart from \"./Charts/BarChart\";\r\n\r\nconst Transactions = ({ userEmail }) => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [categories, setCategories] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        const response = await fetch(`/api/transactions?email=${userEmail}`);\r\n        const data = await response.json();\r\n        setTransactions(data);\r\n\r\n        // Calculate category totals for bar chart\r\n        const categoryTotals = {};\r\n        data.forEach((transaction) => {\r\n          if (transaction.type === \"expense\") {\r\n            categoryTotals[transaction.category] =\r\n              (categoryTotals[transaction.category] || 0) +\r\n              parseFloat(transaction.amount);\r\n          }\r\n        });\r\n        setCategories(categoryTotals);\r\n      } catch (error) {\r\n        console.error(\"Error fetching transactions:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTransactions();\r\n  }, [userEmail]);\r\n\r\n  return (\r\n    <div className=\"transactions\">\r\n      {/* Filter Section */}\r\n      {/* Add filters here if needed */}\r\n\r\n      {/* Bar Chart Section */}\r\n      <div className=\"card\">\r\n        <h2>Expenses by Category</h2>\r\n        {Object.keys(categories).length > 0 ? (\r\n          <BarChart data={categories} />\r\n        ) : (\r\n          <p>No expenses to display.</p>\r\n        )}\r\n      </div>\r\n\r\n      {/* Transaction List */}\r\n      <div className=\"card\">\r\n        <h2>All Transactions</h2>\r\n        {transactions.map((transaction) => (\r\n          <p key={transaction.id}>\r\n            {transaction.category}: ${transaction.amount} on{\" \"}\r\n            {transaction.date}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transactions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}